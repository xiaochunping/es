<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.sishuok</groupId>
	<artifactId>es</artifactId>
	<packaging>pom</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>es</name>
	<url>https://github.com/zhangkaitao/es</url>

	<!--描述项目所属组织的各种属性。Maven产生的文档用 -->
	<organization>
		<!--组织的全名 -->
		<name>es</name>
		<!--组织主页的URL -->
		<url>https://github.com/xiaochunping</url>
	</organization>

	<!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 -->
	<modules>
		<module>parent</module>
		<!--<module>codegen</module> -->
	</modules>

	<!--构建项目需要的信息 -->
	<build>
		<!--使用的插件列表 。 -->
		<plugins>
			<!--plugin元素包含描述插件所需要的信息。 -->
			<plugin>
				<!--插件在仓库里的artifact ID -->
				<artifactId>maven-site-plugin</artifactId>
				<!--被使用的插件的版本（或版本范围） -->
				<version>3.0</version>
				<configuration>
					<locales>zh_CN</locales>
					<outputEncoding>UTF-8</outputEncoding>
					<inputEncoding>UTF-8</inputEncoding>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 -->
	<inceptionYear>2014</inceptionYear>

	<!--发现依赖和扩展的远程仓库列表。-->
	<repositories>
		<repository>
			<id>oschina Releases</id>
			<name>oschina Releases</name>
			<url>http://maven.oschina.net/content/groups/public</url>
		</repository>

		<repository>
			<id>apache-repo</id>
			<name>apache Repository</name>
			<url>https://repository.apache.org/content/groups/public/</url>
		</repository>
		<repository>
			<id>java-repo</id>
			<name>java Repository</name>
			<url>http://download.java.net/maven/2/</url>
		</repository>
		<repository>
			<id>springsource-repo</id>
			<name>SpringSource Repository</name>
			<url>http://repo.spring.io/release/</url>
		</repository>
		<repository>
			<id>springsource-repo-snapshot</id>
			<name>SpringSource Repository</name>
			<url>http://repo.spring.io/snapshot/</url>
		</repository>
		<repository>
			<id>cloudhopper</id>
			<name>Repository for Cloudhopper</name>
			<url>http://maven.cloudhopper.com/repos/third-party/</url>
		</repository>
		<repository>
			<id>jboss-repo-releases</id>
			<name>Jboss Repository</name>
			<url>https://repository.jboss.org/nexus/content/repositories/releases/</url>
		</repository>
		<repository>
			<id>central</id>
			<name>Maven Repository Switchboard</name>
			<layout>default</layout>
			<url>http://repo.maven.apache.org/maven2</url>
		</repository>
		<repository>
			<id>maven-repo1</id>
			<name>maven-repo1</name>
			<layout>default</layout>
			<url>http://repo1.maven.org/maven2/</url>
		</repository>
		<repository>
			<id>sourceforge-releases</id>
			<name>Sourceforge Releases</name>
			<url>https://oss.sonatype.org/content/repositories/sourceforge-releases</url>
		</repository>

	</repositories>

	<!--发现插件的远程仓库列表，这些插件用于构建和报表 -->
	<pluginRepositories>
		<!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 -->
		<pluginRepository>
			<id>oschina Releases</id>
			<name>oschina Releases</name>
			<url>http://maven.oschina.net/content/groups/public</url>
		</pluginRepository>

		<pluginRepository>
			<id>maven2-repo</id>
			<name>maven2 Repository</name>
			<url>http://repo1.maven.org/maven2/</url>
		</pluginRepository>
		<pluginRepository>
			<id>Codehaus repository</id>
			<url>http://repository.codehaus.org/</url>
		</pluginRepository>
		<pluginRepository>
			<id>maven-db-plugin-repo</id>
			<name>maven db plugin repository</name>
			<url>https://maven-db-plugin.googlecode.com/svn/maven/repo</url>
			<layout>default</layout>
		</pluginRepository>

	</pluginRepositories>

	<!-- 该元素描述了项目所有License(许可证)列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 -->
	<licenses>
		<!-- 描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 -->
		<license>
			<!-- license用于法律上的名称 -->
			<name>Apache License, Version 2.0</name>
			<!-- 官方的license正文页面的URL -->
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
			<!-- 项目分发的主要方式：repo，可以从Maven库下载manual， 用户必须手动下载和安装依赖 -->
			<distribution>repo</distribution>
			<!-- 关于license的补充信息 -->
			<comments>A business-friendly OSS license</comments>
		</license>
	</licenses>

	<!-- 持续集成信息 -->
	<ciManagement>
		<system>continuum</system>
		<!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 -->
		<url>https://travis-ci.org/zhangkaitao/es</url>
		<!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） -->
		<notifiers>
			<!--配置一种方式，当构建中断时，以该方式通知用户/开发者 -->
			<notifier>
				<!--传送通知的途径 -->
				<type>mail</type>
				<!--发生错误时是否通知 -->
				<sendOnError>true</sendOnError>
				<!--构建失败时是否通知 -->
				<sendOnFailure>true</sendOnFailure>
				<!--构建成功时是否通知 -->
				<sendOnSuccess>true</sendOnSuccess>
				<!--发生警告时是否通知 -->
				<sendOnWarning>false</sendOnWarning>
				<!--扩展配置项 -->
				<configuration>
					<!--不赞成使用。通知发送到哪里 -->
					<address>576851277@qq.com</address>
				</configuration>
			</notifier>
		</notifiers>
	</ciManagement>

	<!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira -->
	<issueManagement>
		<!--问题管理系统（例如jira）的名字 <system>jira</system> -->
		<!--该项目使用的问题管理系统的URL <url>http://jira.baidu.com/banseon</url> -->
		<system>Github</system>
		<url>https://github.com/zhangkaitao/es/issues</url>
	</issueManagement>

	<!-- 分发管理 -->
	<distributionManagement>
		<!-- mvn site:deploy 部署的位置 -->
		<site>
			<id>local</id>
			<name>filesystem</name>
			<!-- 修改到磁盘的相应位置 -->
			<url>file:D:\target\site</url>
		</site>
	</distributionManagement>

	<!--项目相关邮件列表信息 -->
	<mailingLists>
		<!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 -->
		<mailingList>
			<!--邮件的名称 -->
			<name>测试邮件</name>
			<!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->
			<post>576851277@qq.com</post>
			<!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->
			<subscribe>576851277@qq.com</subscribe>
			<!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->
			<unsubscribe>576851277@qq.com</unsubscribe>
			<!--你可以浏览邮件信息的URL -->
			<archive>http:/hi.baidu.com/banseon/demo/dev/</archive>
		</mailingList>
	</mailingLists>

	<!--项目开发者列表 -->
	<developers>
		<!--某个项目开发者的信息 -->
		<developer>
			<!--SCM里项目开发者的唯一标识符 -->
			<id>xiaochunping9987</id>
			<!--项目开发者的全名 -->
			<name>肖春平</name>
			<!--项目开发者的email -->
			<email>576851277@qq.com</email>
			<!--项目开发者的主页的URL -->
			<url>https://github.com/xiaochunping</url>
			<!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 -->
			<roles>
				<role>software engineer</role>
			</roles>
			<!--项目开发者所属组织 -->
			<organization>湖南理才网-研发部</organization>
			<!--项目开发者所属组织的URL -->
			<organizationUrl>http://www.dayhr.com</organizationUrl>
			<!--项目开发者属性，如即时消息如何处理等 -->
			<properties>
				<dept>No</dept>
			</properties>
			<!--项目开发者所在时区， -11到12范围内的整数。 -->
			<timezone>8</timezone>
		</developer>
	</developers>

	<!--项目的其他贡献者列表 -->
	<contributors>
		<!--项目的其他贡献者。参见developers/developer元素 -->
		<contributor>
			<name />
			<email />
			<url />
			<organization />
			<organizationUrl />
			<roles />
			<timezone />
			<properties />
		</contributor>
	</contributors>

	<!-- 版本控制信息 SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 -->
	<scm>
		<!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 -->
		<url>https://github.com/xiaochunping/es/</url>
		<!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 -->
		<connection>scm:git:git://github.com/xiaochunping/es.git</connection>
		<!--当前代码的标签，在开发阶段默认为HEAD -->
		<tag />
		<!--给开发者使用的，类似connection元素。即该连接不仅仅只读 -->
		<developerConnection>scm:git:ssh://git@github.com:xiaochunping/es.git</developerConnection>
	</scm>


</project>
